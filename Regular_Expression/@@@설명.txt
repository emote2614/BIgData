### 정규 표현식

- 정규표현식은 텍스트 패턴을 일치시키는 강력한 언어
- 문자열에서 특정 패턴을 찾거나 변형하기 위해 사용되는 강력한 도구
- ‘re’ 모듈을 통해 정규표현식을 다룰 수 있음

### 필요성

- 문자열 패턴 매칭
    - 주어진 텍스트에서 특정한 패턴을 매칭하는 기능은 텍스트 데이터에서 유용한 정보를 찾아내거나 검증할 수 있음
- 텍스트 데이터의 유효성 검사
    - 주어진 텍스트가 특정한 형식에 부합하는지 유효성을 검사하는데 사용되며 데이터의 일관성과 안전성 유지
- 데이터 추출과 변형
    - 텍스트에서 원하는 부분을 추출하거나 변형함으로써 데이터 처리 작업을 자동화하고 효율적으로 수행할 수 있음
- 텍스트 전처리
    - 데이터 분석이나 자연어 처리 작업을 수행하기 전 텍스트 데이터를 정제함으로 써 유용
- 효율적인 문자열 철
    - 텍스트를 다루는 작업에서 효율적인 솔루션을 제공함으로써 코드를 작성하는 시간과 노력을 절약 + 실행 속도 향상

### 메타문자

1. **`.`** (마침표): 어떤 한 개의 문자와 일치합니다. 단, 개행 문자를 제외합니다.
2. **``** (별표): 앞의 패턴이 0회 이상 반복됨을 나타냅니다.
3. **`+`** (더하기): 앞의 패턴이 1회 이상 반복됨을 나타냅니다.
4. **`?`** (물음표): 앞의 패턴이 0 또는 1회 등장함을 나타냅니다.
5. **`^`** (캐럿): 뒤의 패턴이 문자열의 시작과 일치함을 나타냅니다.
6. **`$`** (달러): 뒤의 패턴이 문자열의 끝과 일치함을 나타냅니다.
7. **`[]`** (대괄호): 대괄호 안의 어떤 한 문자와 일치합니다.
8. **`()`** (괄호): 괄호 안의 패턴을 그룹화하며, 매칭 결과에서 추출할 수 있습니다.
9. **`|`** (파이프): 둘 중 하나의 패턴과 일치함을 나타냅니다.

### 기본 패턴

- 다양한 문자 및 문자열을 나타내는데 사용
- 단일문자, 특수문자, 반복, 선택 등을 나타내는데 사용


### 반복

- 패턴 내의 요소가 반복되는 것과 일치하는데 사용
- 특정 패턴이 몇 번 반복되는지를 나타내거나 반복 횟수의 범위를 지정할 수 있음


### 대괄호

- 문자 클래스를 나타내는데 사용
- 문자 클래스
    - 정규표현식 패턴 내에서 특정 문자의 집합을 나타냄
    - 해당 위치에서 일치할 수 있는 문자 중 하나를 선택하는데 사용
        - [abc]: a, b, c 중 하나와 일치합니다. (a|b|c와 동일)
        - [0-9]: 0부터 9까지의 숫자 중 하나와 일치합니다. (\d와 동일)
        - [a-z]: 소문자 알파벳 중 하나와 일치합니다.
        - [A-Z]: 대문자 알파벳 중 하나와 일치합니다.
        - [a-zA-Z]: 모든 알파벳 중 하나와 일치합니다.


### 그룹 추출

- 패턴 내에서 특정 부분을 그룹으로 묶어서 추출하는 기능
- 그룹은 괄호로 묶인 부분으로 표현되며, 패턴 내에서 여러 그룹을 사용할 수 있음
- 각 그룹은 패턴일치 결과에 순서대로 번호를 부여 받음
- 번호는 왼쪽에서 오른쪽으로 1부터 시작
- 그룹번호 0은 전체 일치 결과를 나타냄


### 찾기

- 주어진 패턴과 일치하는 문자열을 찾는 작업
    - re.search(pattern, string) - 문자열 내에서 첫 번째로 패턴과 일치하는 부분 찾음
    - re.match(pattern, string) - 문자열의 시작부터 패턴과 일치하는 부분을 찾음
    - re.findall(pattern, string) - 문자열에서 패턴과 일치하는 모든 부분을 찾아 리스트로 반환
    - re.finditer(pattern, string) - 문자열에서 패턴과 일치하는 모든 부분을 찾아 이터레이터로 반환


### 특정 파일의 패턴 찾기
- 파일 이름, 경로, 확장자 등과 일치하는 패턴을 사용하여 수행
